/// <summary>
/// Gets the <see cref="WeekDTO"/> with the specified week number and year for the user with the given id
/// </summary>
/// <param name="weekYear">The year of the week schedule to fetch.</param>
/// <param name="weekNumber">The week number of the week schedule to fetch.</param>
/// <returns><see cref="WeekDTO"/> for the requested week on success else UserNotFound or NotAuthorized</returns>
/// <param name="userId">Identifier of the <see cref="GirafUser"/> to request schedule for</param>
[HttpGet("v1/User/{userId}/week/{weekYear}/{weekNumber}")]
[Authorize]
public async Task<Response<WeekDTO>> ReadUsersWeekSchedule(string userId, int weekYear, int weekNumber) {
    var user = await _giraf.LoadUserWithWeekSchedules(userId);
    if (user == null)
        return new ErrorResponse<WeekDTO>(ErrorCode.UserNotFound);

    // check access rightss
    if (!(await _authentication.HasEditOrReadUserAccess(await _giraf._userManager.GetUserAsync(HttpContext.User), user)))
        return new ErrorResponse<WeekDTO>(ErrorCode.NotAuthorized);
    
    var week = user.WeekSchedule.FirstOrDefault(w => w.WeekYear == weekYear && w.WeekNumber == weekNumber);

    if (week != null) {
        foreach (var weekday in week.Weekdays) {
            foreach (var activity in weekday.Activities) {
                if (activity.TimerKey != null) {
                    var timerPlace = _giraf._context.Timers.FirstOrDefault(t => t.Key == activity.TimerKey);
                    activity.Timer = timerPlace;
                }
            }
        }
        return new Response<WeekDTO>(new WeekDTO(week));
    }

    //Create default thumbnail
    var emptyThumbnail = _giraf._context.Pictograms.FirstOrDefault(r => r.Title == "default");
    if (emptyThumbnail == null) {
        //Create default thumbnail
        _giraf._context.Pictograms.Add(new Pictogram("default", AccessLevel.PUBLIC));
        await _giraf._context.SaveChangesAsync();
        emptyThumbnail = _giraf._context.Pictograms.FirstOrDefault(r => r.Title == "default");

        return new Response<WeekDTO>(new WeekDTO() { WeekYear = weekYear, Name = $"{weekYear} - {weekNumber}", WeekNumber = weekNumber, Thumbnail = new Models.DTOs.WeekPictogramDTO(emptyThumbnail), Days = new int[] { 1, 2, 3, 4, 5, 6, 7 }.Select(d => new WeekdayDTO() { Activities = new List<ActivityDTO>(), Day = (Days)d }).ToArray() });
    }
    emptyThumbnail = _giraf._context.Pictograms.FirstOrDefault(r => r.Title == "default");

    return new Response<WeekDTO>(new WeekDTO()
    {
        WeekYear = weekYear, 
        Name = $"{weekYear} - {weekNumber}", 
        WeekNumber = weekNumber, 
        Thumbnail = new Models.DTOs.WeekPictogramDTO(emptyThumbnail), 
        Days = new[] { 1, 2, 3, 4, 5, 6, 7 }
            .Select(d => new WeekdayDTO() { Activities = new List<ActivityDTO>(), Day = (Days)d }).ToArray()
    });
}            